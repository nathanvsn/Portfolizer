"""
Django settings for portfolio_saas project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Ler variaveis do sistema
from dotenv import load_dotenv

# Carrega o .env antes de qualquer outra ação
load_dotenv()

def get_env_variable(var_name, default=None):
    """
    Get the environment variable or return exception
    :param var_name:
    :return:
    """
    value = os.getenv(var_name)
    if value is not None:
        return value
    elif default is not None:
        return default
    raise Exception(f"Set the {var_name} environment variable")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_variable('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_variable('DEBUG', 'True') == 'True'

# Permitir subdomínios
ALLOWED_HOSTS = get_env_variable('ALLOWED_HOSTS').split(',') if not DEBUG else ['*']
CSRF_TRUSTED_ORIGINS = get_env_variable('CSRF_TRUSTED_ORIGINS').split(',') if not DEBUG else []
FRONTEND_URL = get_env_variable('FRONTEND_URL') if not DEBUG else 'http://localhost:8000'

ROOT_HOSTCONF = 'core.hosts'
PARENT_HOST = os.getenv('PARENT_HOST', 'localhost')
DEFAULT_HOST = 'www'
ROOT_URLCONF = 'core.urls'

# Permite que os cookies de sessão sejam compartilhados entre subdomínios
CSRF_TRUSTED_ORIGINS = get_env_variable('CSRF_TRUSTED_ORIGINS').split(',') if not DEBUG else []
SESSION_COOKIE_DOMAIN = get_env_variable('CSRF_TRUSTED_ORIGINS').split(',') if not DEBUG else None

# Cookies de sessão e CSRF seguros em HTTPS
SESSION_COOKIE_SECURE = True if not DEBUG else False
CSRF_COOKIE_SECURE = True if not DEBUG else False

# Opcional: cookies http-only (mais seguros contra ataques XSS)
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Apps
    'portfolios',
    'custom_auth',
    'pages',
    'projetos',
    'freelance',
    
    # Third-party
    'taggit',
    'django_hosts',
    'django_extensions',
    'django_filters',
]


MIDDLEWARE = [
    'django_hosts.middleware.HostsRequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'core.middleware.csrf_middleware.DynamicCSRFMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_hosts.middleware.HostsResponseMiddleware',

    # Middleware customizado
    'custom_auth.middleware.ProfileRequiredMiddleware',
    'portfolios.ultra.middleware.SubdomainRoutingMiddleware',
    'portfolios.ultra.middleware.SubdomainRouterMiddleware',
    'portfolios.ultra.middleware.SubdomainSecurityMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Diretório global de templates
        'APP_DIRS': True, # Habilitar templates de apps
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

LOGIN_REDIRECT_URL = 'pages:home'
LOGOUT_REDIRECT_URL = 'pages:home'

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Caminho onde os arquivos serão coletados


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Modelo de autenticação customizado
AUTH_USER_MODEL = 'custom_auth.User'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Fazer o gmail enviar e-mails
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'teste@teste.com')
DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_USER', 'teste@teste.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'senha')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
